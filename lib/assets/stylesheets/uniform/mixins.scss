@import 'uniform/variables';

@mixin text-overflow($inherit:false){
    @if $inherit {
        text-overflow: inherit;
        white-space: inherit;
        overflow: inherit;
    } @else {
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;
    }
}
@mixin grayscale($gray: 0.7, $opacity: 1){
    opacity: $opacity;
    -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(grayscale=$gray)";
    filter:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%3E%3Cfilter%20id%3D%22desaturate%22%3E%3CfeColorMatrix%20type%3D%22saturate%22%20values%3D%220%22/%3E%3C/filter%3E%3C/svg%3E#desaturate);
    filter: gray($gray);
    -webkit-filter: grayscale($gray * 100%);
    @if $gray == 0 {
        filter: none;
        -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(grayscale=0)";
        -webkit-filter: grayscale(0);
    }
}


//----------------------------------------------------------------
//             Responsive
//----------------------------------------------------------------

@mixin media($query) {
    @media only screen and (#{$query}){
        @content;
    }
}

@mixin breakpoint($breakpoint){
    @media only screen and (map-get($breakpoints, $breakpoint)){
        @content;
    }
}
@mixin responsive-rule($selector, $include_child_utility: true) {
    @if str-index($selector, '.') == 1 {
        $selector: str-slice($selector, 2, -1);
    }
    
    %#{$selector}{
        @content
    }
    .#{$selector}{
        @content
    }
    @if $include_child_utility {
        .#{$selector}-\*{
            * {
                @content
            }
        }
    }
    
    @each $breakpoint, $breakpoint_query in $breakpoints {
        @include media($breakpoint_query){
            .#{$breakpoint}\:#{$selector}{
                @content
            }
        }
        .#{$breakpoint}-container{
            .#{$breakpoint}\:#{$selector}{
                @content
            }
        }
    }
}

//----------------------------------------------------------------
//             Color
//----------------------------------------------------------------

$color_spectrum: (
    white: #FFFFFF
);
@each $name, $color in $colors {
    $color_spectrum: map-merge($color_spectrum, ("#{$name}": $color));
    @for $index from 1 through 9 {
       $color_spectrum: map-merge($color_spectrum, ("#{$name}-#{(10 - $index) * 10}": change-color($color, $lightness: $index * 10)));
    }
}
@mixin color-rule($selector) {
    @if str-index($selector, '.') == 1 {
        $selector: str-slice($selector, 2, -1);
    }
    @each $name, $value in $color_spectrum {
        @include responsive-rule("#{$selector}-#{$name}"){
            @content($value)
        }
        @include pseudo-class-rule("#{$selector}-#{$name}"){
            @content($value)
        }
    }
}


//----------------------------------------------------------------
//             Size
//----------------------------------------------------------------

@mixin size-rule($selector, $size_type:'rem', $include_child_utility: true){
    $size_spectrum: if($size_type == 'rem', $sizes, (
        '2px': 2px,
        '3px': 3px,
        '4px': 4px
    ));
    @each $size, $value in $size_spectrum {
        @include responsive-rule("#{$selector}-#{$size}", $include_child_utility){
            @content($value)
        }
    }
    @include responsive-rule("#{$selector}", $include_child_utility){
        @content(if($size_type == 'rem', 1rem, 1px))
    }
}


//----------------------------------------------------------------
//             Pseudo Classes
//----------------------------------------------------------------

@mixin pseudo-class-rule($selector){
    @if str-index($selector, '.') == 1 {
        $selector: str-slice($selector, 2, -1);
    }
    @each $pseudo-selector, $pseudo-class in (
        active: active,
        focus: focus,
        hover: hover,
        checked: checked,
        focus-within: focus-within,
        first: first-child,
        last: last-child
    ) {
        @include responsive-rule("#{$pseudo-selector}\\:#{$selector}:#{$pseudo-class}"){
            @content
        }
    }
    .group:hover{
        @include responsive-rule("group-hover\\:#{$selector}"){
            @content
        }
    }
}
