
@mixin text-overflow($inherit:false){
    @if $inherit {
        text-overflow: inherit;
        white-space: inherit;
        overflow: inherit;
    } @else {
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;
    }
}
@mixin grayscale($gray: 0.7, $opacity: 1){
    opacity: $opacity;
    -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(grayscale=$gray)";
    filter:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%3E%3Cfilter%20id%3D%22desaturate%22%3E%3CfeColorMatrix%20type%3D%22saturate%22%20values%3D%220%22/%3E%3C/filter%3E%3C/svg%3E#desaturate);
    filter: gray($gray);
    -webkit-filter: grayscale($gray * 100%);
    @if $gray == 0 {
        filter: none;
        -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(grayscale=0)";
        -webkit-filter: grayscale(0);
    }
}

//----------------------------------------------------------------
//             Position
//----------------------------------------------------------------
@mixin position-v-center(){
    position:absolute;
    top:50%;
    transform: translateY(-50%);
}
@mixin position-h-center(){
    position:absolute;
    left:50%;
    transform: translateX(-50%);
}
@mixin position-center(){
    position:absolute;
    left:50%;
    top:50%;
    transform: translate(-50%, -50%);
}
@mixin position-fill() {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
}


//----------------------------------------------------------------
//             Sizes Media Queries
//----------------------------------------------------------------
@mixin media($query) {
    @media only screen and (#{$query}){
        @content;
    }
}

@mixin size-rule($breakpoint) {
    @include media(map-get($breakpoints, $breakpoint)){
        @content
    }
    .#{$breakpoint}-size{
        @content
    }
}

@mixin size-rules($selector){
    #{$selector}{
        @content
    }
    @each $key, $value in $breakpoints {
        @include media($value){
            #{$selector}-#{$key}{
                @content
            }
        }
        .#{$key}-size #{$selector}-#{$key}{
            @content
        }
    }
}

@mixin sizes($selector, $attributes){
    @each $attribute in $attributes {
        @include size-rules("#{$selector}"){
            #{$attribute}: map-get($sizes, 'base');
        }
        @each $key, $value in $sizes {
            @include size-rules("#{$selector}-#{$key}"){
                #{$attribute}: $value;
                @content
            }
        }
        @include size-rules("#{$selector}-none"){
            #{$attribute}: 0 !important;
            @content
        }
    }
}

@mixin colors($selector, $attributes){
    @each $attribute in $attributes {
        @each $key, $value in $colors {
            @include size-rules("#{$selector}-#{$key}"){
                #{$attribute}: $value;
                @content
            }
        }
    }
}

