<div class="section">
    <h1>
        Spreadsheet
        <span class="uniformLabel -yellow-60">JS</span>
    </h1>
    <p class="text-xl text-light margin-v-2x">
        Renders a <a href="/components/table_grid"><code>TableGrid</code></a> as a spreadsheet where each cell is an input.
    </p>
    
    <div class="flex margin-v-2x space-h">
        <div class="flex-fill width-fill">
            <div id="example-1"></div>
            
            <script>
                document.addEventListener('DOMContentLoaded', function () {
                    document.getElementById('example-1').append(new window.Uniform.Spreadsheet({
                        records: [{
                            name: 'Adrian Beltre',
                            team: 'Texas Rangers',
                            team_url: 'https://www.mlb.com/rangers',
                            position: '3B'
                        }, {
                            name: 'Michael Young',
                            team: 'Texas Rangers',
                            captain: true,
                            team_url: 'https://www.mlb.com/rangers',
                            position: '2B'
                        }, {
                            name: 'Elvis Andrus',
                            team: 'Texas Rangers',
                            team_url: 'https://www.mlb.com/rangers',
                            position: 'SS'
                        }],
                        columns: {
                            name: {
                                order: true
                            },
                            team: {},
                            captain: {
                                input: {
                                    type: 'checkbox'
                                }
                            },
                            team_url: {
                                render: r => "<a href=\"" + r.team_url + "\">URL</a>",
                                input: {
                                    load: v => v.replace(/https?\:\/\//, ""),
                                    dump: v => "https://" + v
                                }
                            },
                            position: {
                                input: {
                                    type: 'select',
                                    load: v => v.toUpperCase(),
                                    dump: v => v.toUpperCase(),
                                    options: ['C', '1B', '2B', '3B', 'SS', 'LF', 'RF', 'CF', 'P']
                                }
                            },
                            notes: {
                                input: (r, done) => {
                                    const content = document.createElement('form');
                                    content.classList.add('bg-white', 'rounded', 'pad')
                                    content.innerHTML = "<h2>Notes</h2>"
                                    content.append(new window.Uniform.BoundInput({
                                        type: 'textarea',
                                        attribute: 'notes',
                                        record: r,
                                        rows: "10",
                                        class: "uniformInput min-width-300-px block"
                                    }).el)
                                    const modal = new window.Uniform.Modal({
                                        content: content
                                    }).render()
                                    
                                    const button = document.createElement('button')
                                    button.classList.add('uniformButton', '-green', 'margin-top')
                                    button.innerHTML = "Update"
                                    button.addEventListener('click', e => {
                                        modal.close()
                                    })
                                    content.append(button)
                                    modal.addEventListener('closed', done)
                                }
                            }
                        }
                    }).el)
                })
            </script>
        </div>
        <div class="flex-auto width-1/3 overflow-hidden">
            <% code 'javascript', {css_class: 'width-fill overflow-x-scroll'} do %>
                // TODO
            <% end %>
        </div>
    </div>
    
    <h3>Options</h3>
    <div class="border border-gray-30 bg-white rounded">
        <table class="uniformTable align-top-*">
            <tr>
                <th>Option</th>
                <th>Type</th>
                <th>Description</th>
                <th></th>
            </tr>
            <tr>
                <td>
                    <code>records</code>
                </td>
                <td>
                    Array
                </td>
                <td>
                    Row data to pass to columns
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td>
                    <code>columns</code>
                </td>
                <td>
                    function or [function, {options}]
                </td>
                <td>
                    Function to render row cell
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td class="text-nowrap"><code>storeKey</code></td>
                <td>String</td>
                <td>Key for saving to LocalStorage. Defaults to <code>'uniform/table' + Object.keys(columns).join("-")</code>.</td>
                <td>
                    optional
                </td>
            </tr>
            <tr>
                <td class="text-nowrap"><code>class, name, id, value</code></td>
                <td>String</td>
                <td>Accepts any html attribute that is then rendered on the modal element.</td>
                <td>
                    optional
                </td>
            </tr>
        </table>
    </div>
    
    <h3>Column Options</h3>
    <div class="border border-gray-30 bg-white rounded">
        <table class="uniformTable align-top-*">
            <tr>
                <th>Option</th>
                <th>Type</th>
                <th>Description</th>
                <th></th>
            </tr>
            <tr>
                <td>
                    <code>render</code>
                </td>
                <td>
                    function(record)
                </td>
                <td>
                    Function to use to render cell. Can also be first argument of column model
                </td>
                <td>
                </td>
            </tr>
            <tr>
                <td>
                    <code>header</code>
                </td>
                <td>
                    string
                </td>
                <td>
                    Render as header, defaults to column key
                </td>
                <td>
                    optional
                </td>
            </tr>
            <tr>
                <td><code>class</code></td>
                <td>String</td>
                <td>Render as class of cells of this column</td>
                <td>
                    optional
                </td>
            </tr>
            <tr>
                <td><code>order</code></td>
                <td>boolean or function(records)</td>
                <td>If column is orderable. If function passes records as arguments, and expects them to be returned ordered. If simply true, then orders by column key on records (ex. <code>name: {order: true}, r1.name < r2.name)</code></td>
                <td>
                    optional
                </td>
            </tr>
        </table>
    </div>
</div>