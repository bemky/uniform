<!DOCTYPE html>
<head>
    <meta http-equiv="Content-type" content="text/html; charset=utf-8">
    <title>Uniform</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/normalize/4.2.0/normalize.css" type="text/css" media="screen">
    <link rel="stylesheet" href="site/preview.css" type="text/css" media="screen" charset="utf-8">
    <link rel="stylesheet" href="site/uniform.css" type="text/css" media="screen" title="no title" charset="utf-8">
</head>
<body>

<% sections = {
uniform: <<-HTML,
    <p class="large">Sass components and defaults for building a UI that's on fleak.</p>
HTML


css_theory: <<-HTML,
    <h3>Don't use ID's</h3>
    <p>Unless you have to, and even then, think twice. HTML Id's make things not reusable. There should only be one instance of an id in a document</p>

    <h3>Use Semanitc Classes Presentationaly :)</h3>
    <p>Here's a decent post on OOCSS (Object Oriented CSS) as it relates to semantic vs presentational classes: <a href="http://blackfalcon.roughdraft.io/5255648-oocss-v-ooscss-sasscast-show-notes">OOCSS v OOSCSS</a>
    <p><strong>TL;DR:</strong> Semantic classes explain what that element is. Presentational classes explain what the shoud look like.</p>
    <p><code>class="property-list"</code> vs <code>class="ul-list col-sm-4"</code>
    <p>Some of us don't want to touch css files (preference: presentational), and some of us live there (preference: semantic). Honestly, the art of good ui development is balancing semantic and presentational classes. Each taken to their extreme is bad.</p>
    <p>Structure html so that the semantic class is first and presentational classes follow.</p>
    <p><code>class="property-list ul-list col-sm-4"</code></p>

    <h3>Save the Namespace, save the world</h3>
    <p>Don't make presentational classes that will clash with elements that could mean something else. I'm looking at you Bootsrap!</p>
    <p><code>class="label"</code> should be <code>class="text-label"</code></p>

    <h3>Train-case</h3>
    <p>Use train-case for class names, not camelCase or snake_case. It's quicker to type and honestly just conventional.</p>

    <div class="row">
        <div class="col-sm-6">
            <h3>Wrappers and Containers</h3>
            <p>The order of nesting should go Wrapper > Element > Container. Sometimes you have to have an inside layer to do advanced css things, and the container should be that layer. This is not a suggestion for every object; use wrapper and/or container as needed.</p>
        </div>
        <div class="col-sm-6">
            <h3>&nbsp;</h3>
<pre><xmp><div class="property-wrapper">
    <div class="property">
        <div class="property-container">
        </div>
    </div>
</div></xmp></pre>
        </div>
    </div>
HTML



colors: <<-HTML,
<table>
#{%w(green blue red gray yellow).map{|color|
    ["-light", "", "-dark"].map{|style|
        "<tr>
            <td><span class='swatch #{color}#{style}-bg'></span></td>
            <td><code>sass// $#{color}#{style}</code></td>
            <td><code>class// .#{color}#{style}</code></td>
        </tr>"
    } + ["<tr><td colspan='3'>&nbsp;</td></tr>"]
}.flatten.join("\n")}
</table>
HTML


buttons: <<-HTML,
    <p>Mix and match styles to make the right button, all colors are available as well.</p>
    <p><code>#{CGI::escapeHTML "<a href='#' class='btn'></a>"}</code></p>
    <table class="table" cellspacing="0" cellpadding="0">
        <tr>
            <th></th>
            <th>Normal</th>
            <th><code>.green</code></th>
        </tr>
        <tr>
            <th></th>
            <td><a class="btn">Button</a></td>
            <td><a class="btn green">Button</a></td>
        </tr>
        <tr>
            <th><code>:hover</code> or <code>.hover</code></th>
            <td><a class="btn hover">Button</a></td>
            <td><a class="btn green hover">Button</a></td>
        </tr>
        <tr>
            <th><code>:active</code> or <code>.active</code></th>
            <td><a class="btn active">Button</a></td>
            <td><a class="btn green active">Button</a></td>
        </tr>
        <tr>
            <th><code>:disabled</code> or <code>.disabled</code></th>
            <td><a class="btn disabled">Button</a></td>
            <td><a class="btn green disabled">Button</a></td>
        </tr>
        <tr>
            <th><code>.subtle</code></th>
            <td><a class="btn subtle">Button</a></td>
            <td><a class="btn green subtle">Button</a></td>
        </tr>
        <tr>
            <th><code>.small</code></th>
            <td><a class="btn small">Button</a></td>
            <td><a class="btn green small">Button</a></td>
        </tr>
        <tr>
            <th><code>.large</code></th>
            <td><a class="btn large">Button</a></td>
            <td><a class="btn green large">Button</a></td>
        </tr>
        <tr>
            <th><code>.outline</code></th>
            <td><a class="btn outline">Button</a></td>
            <td><a class="btn green outline">Button</a></td>
        </tr>
        <tr>
            <th><code>.circle</code></th>
            <td><a class="btn circle">Button</a></td>
            <td><a class="btn green circle">Button</a></td>
        </tr>
        <tr>
            <th><code>.block</code></th>
            <td><a class="btn block">Button</a></td>
            <td><a class="btn green block">Button</a></td>
        </tr>
    </table>
HTML

inputs: <<-HTML,
    <h3>Custom Inputs</h3>
    <p><code><xmp><span class='custom-select'><select></select></span></xmp></code></p>
    <p><span class='custom-select'><select class="custom"><option>An Option</option></select></span></p>

    <h3>Inline Inputs</h3>
    <p>Ever want to put in an input and it's label in line, and have it be 100% width responsive? Well, you can't, unless you use something like inline-input.</p>
    <div class="row">
        <div class="col-sm-6">
            <div class="inline-input" style="width:100%">
                <span class="label"><label for="name">Name</label></span>
                <span><input id="name" placeholder="Jonathan Doe"></span>
            </div>
            <br/>
            <div class="inline-input" style="width:100%">
                <span class="label"><label for="car">Car Preference</label></span>
                <span class="select"><select id="car" class="custom"><option>Tesla</option></select></span>
            </div>
        </div>
        <div class="col-sm-6">
<pre><xmp><div class="inline-input">
    <span class="label">
        <label for="name">Name</label>
    </span>
    <span>
        <input id="name" placeholder="Jonathan Doe">
    </span>
</div></xmp></pre>
        </div>
    
    </div>
HTML


loaders: <<-HTML,
    <h3>Dots</h3>
    <div class="loader-dots">
        <div class="loader-dots-container">
            <span>&bull;</span>
            <span>&bull;</span>
            <span>&bull;</span>
        </div>
    </div>
<pre><xmp><div class="loader-dots">
    <div class="loader-dots-container">
        <span>&bull;</span>
        <span>&bull;</span>
        <span>&bull;</span>
    </div>
</div></xmp></pre>


    <div class="loader-dots light">
        <div class="loader-dots-container">
            <span>&bull;</span>
            <span>&bull;</span>
            <span>&bull;</span>
        </div>
    </div>
    <h4>Optional Class: <code>light</code></h4>
<pre><xmp><div class="loader-dots light">
    <div class="loader-dots-container">
        <span>&bull;</span>
        <span>&bull;</span>
        <span>&bull;</span>
    </div>
</div></xmp></pre>


    <h4>Optional Class: <code>cover</code></h4>
<pre><xmp><div class="loader-dots cover">
    <div class="loader-dots-container">
        <span>&bull;</span>
        <span>&bull;</span>
        <span>&bull;</span>
    </div>
</div></xmp></pre>
<pre><xmp><div style="height:200px; position:relative;">
    <div class="loader-dots cover">
        <div class="loader-dots-container">
            <span>&bull;</span>
            <span>&bull;</span>
            <span>&bull;</span>
        </div>
    </div>
</div></xmp></pre>
HTML
} %>
    <div class="side-nav">
        <ul class="uniform-nav">
            <% sections.each do |key, html| %>
                <li><a href="#<%= key %>"><%= key.to_s.titleize %></a></li>
            <% end %>
        </ul>
    </div>
    <div class="main-content">
        <% sections.each do |key, html| %>
            <a name="<%= key %>"></a>
            <div class="section" >
                <h1><%= key.to_s.titleize %></h1>
                <%= html %>
            </div>
        <% end %>
    </div>
    <script>document.write('<script src="http://' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1"></' + 'script>')</script>
</body>