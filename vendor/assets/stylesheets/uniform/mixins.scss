@mixin opacity($o: 1){
    -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity="+$o*100+")";
    filter: alpha(opacity=$o*100);
    -moz-opacity: $o;
    -khtml-opacity: $o;
    opacity: $o;
}
@mixin blur($amount: 5px){
    filter: blur($amount);
    -webkit-filter: blur($amount);
    -moz-filter: blur($amount);
    -o-filter: blur($amount);
    -ms-filter: blur($amount);
}
@mixin text-overflow($inherit:false){
    @if $inherit == false {
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;
    } @else {
        text-overflow: inherit;
        white-space: inherit;
        overflow: inherit;
    }
}
@mixin flicker-fix(){
    -webkit-backface-visibility: hidden; // Some weird safari bug involving hovering on li or a
    -webkit-transform: translate3d(0, 0, 0); // Some weird safari bug involving hovering on li or a
}
@mixin grayscale($gray: 0.7, $opacity: 1){
    opacity: $opacity;
    -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(grayscale=$gray)";
    filter:url(data:image/svg+xml,%3Csvg%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%3E%3Cfilter%20id%3D%22desaturate%22%3E%3CfeColorMatrix%20type%3D%22saturate%22%20values%3D%220%22/%3E%3C/filter%3E%3C/svg%3E#desaturate);
    filter: gray($gray);
    -webkit-filter: grayscale($gray * 100%);
    @if $gray == 0 {
        filter: none;
        -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(grayscale=0)";
        -webkit-filter: grayscale(0);
    }
}
@mixin vertical-middle(){
    position:absolute;
    top:50%;
    @include transform(translateY(-50%));
}
@mixin horizontal-center(){
    position:absolute;
    left:50%;
    @include transform(translateX(-50%));
}
@mixin align-middle(){
    position:absolute;
    left:50%;
    top:50%;
    @include transform(translate(-50%, -50%));
}
@mixin clean-icon(){
    -webkit-backface-visibility: hidden; // Some weird safari bug involving hovering on li or a
    -webkit-transform: translate3d(0, 0, 0); // Some weird safari bug involving hovering on li or a
    -webkit-font-smoothing: antialiased;
}

// Borrowed from Neat.io v1.8.0
$default-feature: min-width;
$grid-columns: 12 !default;
@mixin media($query: $feature $value $columns, $total-columns: $grid-columns) {
  @if length($query) == 1 {
    @media screen and ($default-feature: nth($query, 1)) {
      $default-grid-columns: $grid-columns;
      $grid-columns: $total-columns !global;
      @content;
      $grid-columns: $default-grid-columns !global;
    }
  } @else {
    $loop-to: length($query);
    $media-query: "screen and ";
    $default-grid-columns: $grid-columns;
    $grid-columns: $total-columns !global;

    @if is-not(is-even(length($query))) {
      $grid-columns: nth($query, $loop-to) !global;
      $loop-to: $loop-to - 1;
    }

    $i: 1;
    @while $i <= $loop-to {
      $media-query: $media-query + "(" + nth($query, $i) + ": " + nth($query, $i + 1) + ") ";

      @if ($i + 1) != $loop-to {
        $media-query: $media-query + "and ";
      }

      $i: $i + 2;
    }

    @media #{$media-query} {
      @content;
      $grid-columns: $default-grid-columns !global;
    }
  }
}